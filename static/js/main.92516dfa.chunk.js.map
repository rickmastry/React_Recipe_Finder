{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","title","src","image_url","alt","length","concat","substring","publisher","Link","to","pathname","recipe_id","state","API_KEY","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","console","log","stop","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","this","components_Recipes","Component","proxy","Recipe","activeRecipe","req","res","location","href","publisher_url","React","Router","BrowserRouter","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92516dfa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getRecipe} style={{marginBottom:\"2rem\"}}>\r\n        <input className=\"form__input\" type=\"text\" name=\"recipeName\"/>\r\n\r\n        <button className=\"form__button\">Search</button>\r\n    </form>\r\n);\r\n\r\n\r\nexport default Form;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Recipes = (props) => (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n       {props.recipes && props.recipes.map((recipe) => {\r\n         return (\r\n             <div key={recipe.title} className=\"col-md-4\" style={{marginBottom:\"2rem\"}}>\r\n               <div className=\"recipes__box\">\r\n                 <img \r\n                    className=\"recipe__box-img\" \r\n                    src={recipe.image_url} \r\n                    alt={recipe.title}/>\r\n                 <div className=\"recipe__text\">\r\n                    <h5 className=\"recipes__title\">\r\n                    \r\n                    {recipe.title.length < 20 ? `${recipe.title}` : `${recipe.title.substring(0,25)}...`}\r\n                    \r\n                    </h5>\r\n                    <p className=\"recipes__subtitle\">Publisher: <span>{recipe.publisher}</span></p>\r\n                 </div>\r\n                  <button className=\"recipe_buttons\">\r\n                    <Link to={{\r\n                        pathname: `/recipe/${recipe.recipe_id}`,\r\n                        state: {recipe: recipe.title}\r\n                        }}>View Recipe</Link>  \r\n                  </button>\r\n               </div>\r\n              </div>\r\n        \r\n         );\r\n       })}\r\n       </div>\r\n    </div>\r\n);\r\n\r\n\r\n\r\nexport default Recipes;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nconst API_KEY = \"cc066a48599ff5cd3c3c06699f0cf0c3\";\n\nclass App extends Component {\n  state = {\n    recipes: []\n  }\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=10 `);\n    const data = await api_call.json();\n    this.setState({recipes: data.recipes});\n    console.log(this.state.recipes);\n  }\n  componentDidMount = () => {\n    const json = localStorage.getItem(\"recipes\");\n    const recipes = JSON.parse(json);\n    this.setState({recipes: recipes});\n  }\n  componentDidUpdate = () => {\n      const recipes = JSON.stringify(this.state.recipes);\n      localStorage.setItem(\"recipes\", recipes);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n       <header className=\"App-header\">\n         <h1 className=\"App-title\">Recipe Search</h1>\n       </header>\n       <Form getRecipe={this.getRecipe}/>\n       <Recipes recipes={this.state.recipes}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst API_KEY = \"cc066a48599ff5cd3c3c06699f0cf0c3\";\r\nconst proxy = 'https://cors-anywhere.herokuapp.com/';\r\n\r\n\r\nclass Recipe extends React.Component {\r\n    state = {\r\n        activeRecipe: []\r\n    }\r\n    componentDidMount = async () => {\r\n       \r\n        const title = this.props.location.state.recipe;\r\n        const req = await fetch(`${proxy}https://www.food2fork.com/api/search?key=${API_KEY}&q=${title}`);\r\n\r\n        const res = await req.json();\r\n        console.log(res);\r\n        this.setState({ activeRecipe: res.recipes[0] });\r\n\r\n        console.log(this.state.activeRecipe);\r\n      \r\n    }\r\n    render(){\r\n        const recipe = this.state.activeRecipe;\r\n        return (\r\n          <div className=\"container\">\r\n           { this.state.activeRecipe.length !== 0 &&\r\n             <div className=\"active-recipe\">\r\n                <img className=\"active-recipe__img\" src={recipe.image_url} alt={recipe.title}/>\r\n                <h3 className=\"active-recipe__title\">{recipe.title}</h3>\r\n                <h4 className=\"active-recipe__publisher\">\r\n                  Publisher: <span>{recipe.publisher}</span>\r\n                </h4>\r\n                <p className=\"active-recipe__website\">\r\n                 <span><a href={recipe.publisher_url}>{recipe.publisher_url}</a></span>\r\n                </p>\r\n                <button className=\"active-recipe__button\">\r\n\r\n                 <Link to=\"/\">Go Home</Link>\r\n                \r\n                \r\n                </button>\r\n  \r\n              </div>\r\n             \r\n           }\r\n          \r\n          </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport{BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport App from \"../App\";\r\nimport Recipe from \"./Recipe\";\r\n\r\nconst Router = () => (\r\n    <BrowserRouter>\r\n     <Switch>\r\n       <Route path=\"/\" component={App} exact />\r\n       <Route path=\"/recipe/:id\" component={Recipe} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\n\r\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport Router from \"./components/Router\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}